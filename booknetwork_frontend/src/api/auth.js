import axios from 'axios'

const API_BASE_URL = process.env.VUE_APP_API_BASE_URL || 'http://localhost:8000/api/v1'

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios
const api = axios.create({
    baseURL: API_BASE_URL,
    headers: {
        'Content-Type': 'application/json',
    },
})

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∫ –∑–∞–ø—Ä–æ—Å–∞–º
api.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem('access_token')
        if (token) {
            config.headers.Authorization = `JWT ${token}`
        }
        return config
    },
    (error) => {
        return Promise.reject(error)
    }
)

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏
api.interceptors.response.use(
    (response) => response,
    async (error) => {
        const originalRequest = error.config

        if (error.response?.status === 401 && !originalRequest._retry) {
            originalRequest._retry = true

            const refreshToken = localStorage.getItem('refresh_token')
            if (refreshToken) {
                try {
                    console.log('üîÑ Access token –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...')
                    const response = await axios.post(`${API_BASE_URL}/auth/token/refresh/`, {
                        refresh: refreshToken
                    })

                    const newAccessToken = response.data.access
                    localStorage.setItem('access_token', newAccessToken)

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    originalRequest.headers.Authorization = `JWT ${newAccessToken}`

                    console.log('‚úÖ Token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
                    return api(originalRequest)
                } catch (refreshError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è token:', refreshError)
                    // –ï—Å–ª–∏ refresh —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    localStorage.removeItem('access_token')
                    localStorage.removeItem('refresh_token')
                    window.location.href = '/login'
                    return Promise.reject(refreshError)
                }
            } else {
                // –ù–µ—Ç refresh token, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
                window.location.href = '/login'
            }
        }

        return Promise.reject(error)
    }
)

export const authAPI = {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    register(userData) {
        return api.post('/auth/users/', userData)
    },

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    activate(uid, token) {
        return api.post('/auth/users/activation/', { uid, token })
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–æ–≤
    login(credentials) {
        return api.post('/auth/jwt/create/', credentials)
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    refreshToken(refreshToken) {
        return api.post('/auth/token/refresh/', { refresh: refreshToken })
    },

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    verifyToken(token) {
        return api.post('/auth/jwt/verify/', { token })
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getProfile() {
        return api.get('/auth/users/me/')
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateProfile(userData) {
        return api.patch('/auth/users/me/', userData)
    },

    // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
    changePassword(passwordData) {
        return api.post('/auth/users/set_password/', passwordData)
    },

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    resetPassword(email) {
        return api.post('/auth/users/reset_password/', { email })
    },

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    resetPasswordConfirm(uid, token, new_password) {
        return api.post('/auth/users/reset_password_confirm/', {
            uid,
            token,
            new_password
        })
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    getUsers() {
        return api.get('/auth/users/')
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    getUser(userId) {
        return api.get(`/auth/users/${userId}/`)
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deleteUser(userId) {
        return api.delete(`/auth/users/${userId}/`)
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
export const tokenUtils = {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
    isTokenValid() {
        const token = localStorage.getItem('access_token')
        if (!token) return false

        try {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å expiration
            const payload = JSON.parse(atob(token.split('.')[1]))
            const exp = payload.exp * 1000 // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            return Date.now() < exp
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error)
            return false
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–æ–∫–µ–Ω–∞
    getTokenData() {
        const token = localStorage.getItem('access_token')
        if (!token) return null

        try {
            const payload = JSON.parse(atob(token.split('.')[1]))
            return {
                userId: payload.user_id,
                username: payload.username,
                exp: new Date(payload.exp * 1000),
                issuedAt: new Date(payload.iat * 1000)
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
            return null
        }
    },

    // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    clearTokens() {
        localStorage.removeItem('access_token')
        localStorage.removeItem('refresh_token')
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    saveTokens(access, refresh) {
        localStorage.setItem('access_token', access)
        localStorage.setItem('refresh_token', refresh)
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º api –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
export default api